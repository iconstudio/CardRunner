/// @description 초기화
randomize()

/*
	실행 중에 각종 수치를 암호화 하는데 사용됩니다.

	매 실행 시마다 달라지므로 서버에 암호화된 값을 보낼 때는 사용할 수 
	없고, 대신 클라이언트에서 내부적으로 값을 처리할 때 사용합니다.
	번거롭고 최적화에 문제가 있겠지만, 계속 중요한 값들은 이 값에 의한 
	처리를 거치게 해야합니다.
*/
global.obfuscation_code = string_copy(string(irandom_range(1000000, 10000000)), 1, 6)

/*
	게임 내에서 사용되는 재화들입니다.
	모두 암호화되어 저장되고 서버에서 받아옵니다.

	맨 처음에 서버에서 받아온 값을 저장하고 그 이후로는 계속 클라이언트 
	단에서 조작이 이루어집니다. 하지만 정기적으로 서버에서 검증을 해 줄 
	필요가 있습니다.
*/
global.player_money_purchased = 0 // 사용했던 현금, 숫자로 저장됩니다.
global.player_cash = ["0"] // 보석, 문자열 배열로 저장됩니다.
global.player_gold = "" // 골드, 문자열로 저장됩니다.

/*
	플레이어가 소유한 모든 캐릭터입니다.
	모두 암호화되어 저장되고 서버에서 받아옵니다.

	각 캐릭터 개체는 map을 이용하여 각종 속성을 저장합니다. 추후에 lightweight 
	object로 변경될 예정입니다. 캐릭터가 추가될 때마다 이 map도 수정되야 합니다.

	플레이어 구조 : /--------------------------------------------------------\
									|	 번호	 | 0					 | 1					 | ... | 5					 |
									+--------+-------------+-------------+-----+-------------+
									|	  id	 | 00000000001 | 00000000002 | ... | 00000000005 |
									+--------+-------------+-------------+-----+-------------+
									|	 객체	 | oCharacterA | oCharacterB | ... | oCharacterC |
									+--------+-------------+-------------+-----+-------------+
									| 능력치 | [100, 1, ]  | [100, 0, ]	 | ... | [200, 10, ] |
									'--------+-------------+-------------+-----+-------------'
*/
global.player_character_list = ds_map_create()

/*
	카드 목록과 덱 목록에서 사용되는 카드의 식별자는 모두 같아야합니다.
	예를 들어 화염구를 날리는 카드는 카드 map에서도, 그 카드가 들어있는 
	덱의 목록에서도 똑같이 "card_fireball"을 사용해야합니다.

	카드가 여러장 나오면 그 카드를 모아 효과를 강화할 수 있습니다. 카드의 
	추가 능력을 해금하는 방식은 없을 예정입니다. 오직 효능의 증가 뿐입니다.

	캐릭터는 해금하면 상자나 보상에서 강화 점수를 얻어 능력치를 강화하거나, 
	추가 능력을 해금할 수 있지만 캐릭터는 강화로 강해지는 정도가 매우 적어야
	합니다. 적어도 캐릭터보단 카드의 영향력이 더 강해야합니다. 안 그러면 
	그냥 캐빨 현질겜이 되고 말 것입니다.
*/
event_user(0)

/*
	플레이어가 소유한 모든 카드입니다.
	모두 암호화되어 저장되고 서버에서 받아옵니다.

	이 카드들은 카드의 종류 별로 map으로 구분되어 저장됩니다. 이 map은 
	반드시 모든 카드의 종류에 따라서 값을 0 등으로 초기화해줘야 합니다.
	카드가 추가될 때마다 이 map도 수정되야 합니다.
*/
global.player_card_list = ds_map_create()

/*
	플레이어가 소유한 모든 덱입니다.
	모두 암호화되어 저장되고 서버에서 받아옵니다.

	각 덱은 persistent가 적용된 객체입니다. 각 덱 역시 들어있는 카드의 
	목록을 들고 있습니다. 하지만 텅 빌 수도 있습니다.

	덱 구조: /--------------------------------------------------------\
					 |	 덱		| 0						| 1						| ... | 5						|
					 +--------+-------------+-------------+-----+-------------+
					 |	 id		| 00000000001 | 00000000002 | ... | 00000000005 |
					 +--------+-------------+-------------+-----+-------------+
					 |	이름	| Test Deck 1 | Test Deck 2 | ... | Test Deck 5 |
					 +--------+-------------+-------------+-----+-------------+
					 | (카드) | [a, b, ...] | [a, c, e]		| ... | [b, d, ...] |
					 '--------+-------------+-------------+-----+-------------'
*/
global.player_deck_number = 0
global.player_deck_number_max = 5
global.player_deck_list = ds_grid_create(global.player_deck_number_max, 2)
ds_grid_clear(global.player_deck_list, noone)

/*
	게임 진행에 사용되는 덱입니다.
	게임 시작 시마다 선택했던 덱을 받아옵니다.
*/
global.game_player_deck = noone

/*
	게임 구성 변수들입니다.
*/
global.game_mode = GAME_MODE.none

/*
	서버나 외부 파일로부터 그 내용을 불러옵니다.
*/
character_register("character_silhouette", oCharacterSilhouette)

global.game_player_deck = deck_add("Test Deck 1", "fireball")
deck_add("Test Deck 2", "shield")
deck_add("Test Deck 3", "fireball")
deck_add("Test Deck 4", "fireball")
deck_add("Test Deck 5", "fireball")


